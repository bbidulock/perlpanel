=pod

=for comment
$Id: perlpanel-applet-howto.pod,v 1.15 2004/02/18 19:27:16 jodrell Exp $

=head1 DESCRIPTION

This document explains how to write applets for the PerlPanel.

=head1 EXAMPLE

	# declare our package:
	package PerlPanel::Applet::HelloWorld;

	# constructor:
	sub new {
		my $self		= {};
		$self->{package}	= shift;
		bless($self, $self->{package});
		return $self;
	}

	# build the widget:
	sub configure {
		my $self = shift;
		$self->{widget} = Gtk2::Button->new('Click Me!');
		$self->{widget}->signal_connect(
			'clicked',
			sub {
				PerlPanel::alert(
					'Hello World!'
				);
			}
		);
	}

	# return the widget;
	sub widget {
		return $_[0]->{widget};
	}

	# return the expand (1 or 0) for packing:
	sub expand {
		return 0;
	}

	# return the fill (1 or 0) for packing:
	sub fill {
		return 0;
	}

	# return 'start' or 'end':
	sub end {
		return 'start';
	}

	sub get_default_config {
		my $hashref = {
			name	=> 'value',
			'foo'	=> 'bar',
			'list'	=> [1, 2, 3, 4, 5],
		};
		return $hashref;
	}

	1;

=head1 INTRODUCTION

It is very easy to write applets for the PerlPanel. Applets are simple
Perl objects, and are allowed to do anything that a normal Gtk2-Perl
program might do.

The package name for the applet must be of the form

	PerlPanel::Applet::AppletName
	
and should have the filename

	AppletName.pm

In order to work properly with the PerlPanel, they need to have an
interface the PerlPanel can understand.

When it loads a module, PerlPanel will create a new instance of the
applet. It will then call various methods of the object in order to work
out what to do with it.

These methods are explained below.

=head1 INSTALLING YOUR APPLET

To make your applet usable, you can place it in one of two places:

=over

=item * C<$PREFIX/lib/perlpanel/PerlPanel/Applet>, for site-wide use

=item * C<$HOME/.perlpanel/applets>, for single-user use

=back

You should also add an entry to the applet registry file, located at
C<$PREFIX/share/perlpanel/applet.registry>. This file contains a short
textual description of each available applet, for example:

	Commander=A button to show a command dialog.

Finally, you should place a 48x48 icon representing your applet into
C<$PREFIX/share/pixmaps/perlpanel/applets>. This icon will be used in
the applet selector.

If your applet uses any Glade files, they should be installed into
C<$PREFIX/share/perlpanel/glade>.

=head1 REQUIRED METHODS

	$applet->new

The constructor. This is pretty obvious. It can accept arguments but
PerlPanel won't send it any.

	$applet->configure

This stage is intended for the loading of config data, creation of
widgets, etc.

	$applet->widget

This method should return the Gtk widget that is to be displayed on the
panel. It can be any kind of Gtk widget apart from a window.

	$applet->expand
	$applet->fill

The panel uses a horizontal packing box to contain the applet widgets.
These two methods return integer values for the 'expand' and 'fill'
arguments to C<pack_start()>.

	$applet->get_default_config

This method returns a reference to a hash containing the default
configuration data. This data is imported into the user's config file
and is saved to disk and can then be modified by the user as needed. It
is only called once - the first time the applet is loaded, after which
the panel will use the data from the user's config file.

If this methods returns C<undef> then the panel will assume there is no
configuration data.

NB: The C<end()> function is now deprecated and does not need to be used
in new applets.

=head1 HISTORICAL NOTE

The following sections describe the variables and functions that PerlPanel
provides that make applet writing easier. Prior to version 0.4.0, the
functions below were accessed using the form

	$PerlPanel::OBJECT_REF->function_name

As of version 0.4.0, the syntax is

	PerlPanel::function_name

For he purposes of backwards compatibility, the older form will continue to
work, but all new code should use the new syntax.

=head1 USEFUL VARIABLES

You can access the following variables in your code that give you access
to the internal guts of the panel:

	$PerlPanel::OBJECT_REF

This is a reference to the main panel object. A number of methods are
available for your use, they're explained below.

	@PerlPanel::APPLET_DIRS

This contains directory paths which PerlPanel will use to search for
applets. It will at least contain C<$PREFIX/lib/perlpanel/PerlPanel/Applet>
and C<$HOME/.perlpanel/applets>.

=head1 USEFUL FUNCTIONS

	PerlPanel::get_config($appletname)

This function returns a reference containing the configuration data for
the applet. The structure of the data will be that defined by the
C<get_default_config> function.

	PerlPanel::tips()

This returns a C<Gtk2::Tooltips> object ready for use. In versions prior to
0.4.0, this was accessed using C<$PerlPanel::TOOLTIPS_REF>.

	PerlPanel::icon()

This returns a GdkPixbuf object containing the PerlPanel icon. You
should use this pixbuf to set the icon for any windows you create, eg:

	$dialog->set_icon(PerlPanel::icon);

You don't need to resize the pixbuf, this is done when the application
(a window manager, or task list) requires it.

	PerlPanel::icon_size()

The size of icons on the panel, in pixels. You should use this to scale
things so that everything fits nicely together.

	PerlPanel::icon_size_name()

The name of the Gtk stock icon size, eg C<'large-toolbar'> or C<'menu'>.
Again, use this to correctly scale things in your applet.

	PerlPanel::screen_width

	PerlPanel::screen_height

These two methods return the width and height (in pixels) of the default
display. PerlPanel attempts to work this out if the system's Gtk+ is
recent enough (ie later than 2.2.0), otherwise it will take them from the
output of the C<xdpyinfo(1)> program.

	PerlPanel::position

This returns the panel's physical position on-screen, either C<'top'> or
C<'bottom'>. This is useful for when you want to show popup menus from
your applets (for an example, see the BBMenu applet), and need to know
the position of the panel.

	PerlPanel::save_config

This tells the panel to save its configuration data to the resource file.

	PerlPanel::shutdown

This tells the panel to save its config file to disk and exit.

	PerlPanel::reload

This tells the panel to destroy its current instance, and create a new
one, having reloaded config data from disk. This is useful for when you've
just changed a config variable and want to apply the change.

	PerlPanel::request_string($message, $callback)

This is a clone of the request_string method from the Gnome libs, so
that PerlPanel isn't dependent on Gnome being installed. It prompts the
user for a string using C<$message>, and executes C<$callback> when the
user presses 'Ok' or hits the Enter key. The callback's C<$_[0]> will
contain the supplied string.

	PerlPanel::request_password($message, $callback)

As above, except the entry widget will not show the entered characters.

	PerlPanel::question($message, $ok_callback,
		$cancel_callback)

This prompts the user to answer a Yes/No type question. C<$ok_callback>
is executed when the user hits 'Ok'. Working out what happens when the
user hits 'Cancel' is left as an exercise for the reader.

	PerlPanel::error($message, $ok_callback)

This pops up a dialog with an error icon and the given message.
C<$ok_callback> is executed if the user hits the 'Ok' button.

	PerlPanel::warning($message, $ok_callback)

This pops up a dialog with a warning icon (less severe than an error)
and the given message. C<$ok_callback> is executed if the user hits the
'Ok' button.

	PerlPanel::notify($message, $ok_callback)

This pops up a dialog with a information icon and the given message.
C<$ok_callback> is executed if the user hits the 'Ok' button.

	PerlPanel::get_widget_position($widget)

This returns two numbers corresponding to the position on-screen of the
top-left corner of $widget. This means that C<$widget> must be visible on
screen.

	PerlPanel::get_mouse_pointer

This returns two numbers corresponding to the position on-screen of the
mouse pointer.

	PerlPanel::exec_wait($cmd, $callback)

This function allows you to execute a command and wait for it to finish,
without interrupting the Gtk main loop, and without inducing unneeded
CPU load with a custom C<while()> loop. The command contained in C<$cmd>
is opened as a filehandle - so calling applications which detach from
STDOUT are not recommended. C<exec_wait> creates a Glib handler and
waits for C<eof> from the handle. Then it executes the function in
C<$callback>.

This function exists mainly because the 'IconBar' applet needs a way to
wait for the desktop entry editor to close.

	PerlPanel::load_glade($name);

This returns a C<Gtk2::GladeXML> object loaded from the file
C<$PREFIX/share/perlpanel/glade/$name.glade>. This is a keyboard-plastic
saving utility only, and doesn't do anything else.

	PerlPanel::has_application_menu

Returns a true value if an application launcher menu (BBMenu for example) is
present in the user's applet list.

	PerlPanel::has_action_menu

Returns a true value if an ActionMenu applet is in the user's applet list.

	PerlPanel::has_pager

Returns a true value if an Pager applet is in the user's applet list.

=head1 WRITING MENU APPLETS

PerlPanel provides an easy-to-use base menu class for creating menu applets.
Consult L<PerlPanel::MenuBase> for more information.

=cut
